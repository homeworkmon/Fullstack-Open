{"version":3,"sources":["services/persons.js","components/search.js","components/form.js","components/people.js","components/notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","changedPerson","put","Search","query","setQuery","value","onChange","event","preventDefault","target","Form","newName","phone","handleSubmit","handleNoteChange","handlePhoneChange","onSubmit","type","People","persons","handleDelete","filter","person","name","toLowerCase","includes","map","i","number","onClick","Notification","message","messageClass","className","App","useState","setPersons","setNewName","setPhone","setMessage","setMessageClass","useEffect","dbService","dbpersons","length","window","confirm","setTimeout","catch","error","alert","dbnewperson","concat","find","p","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a51f404.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst makeDeletion = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst replace =(changedPerson) => {\n    const request = axios.put(`${baseUrl}/${changedPerson.id}`, changedPerson)\n    return request.then(response => response.data)\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {getAll, create, makeDeletion, replace}","const Search = ({ query, setQuery }) => {\n\n    const handleSearch = (event) => {\n      event.preventDefault()\n      setQuery(event.target.value)\n    }\n  \n    return (\n      <div>\n        search: <input\n        value={query}\n        onChange={handleSearch}\n        />\n      </div>\n    )\n}\n\nexport default Search","const Form = ({ newName, phone, handleSubmit, handleNoteChange, handlePhoneChange}) => {\n\n    return (\n      <form onSubmit={handleSubmit}>\n        <div>\n          name: <input \n          value={newName}\n          onChange={handleNoteChange}\n          />\n        </div>\n        <div>\n          number: <input \n          value={phone}\n          onChange={handlePhoneChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default Form","const People = ({persons, query, handleDelete}) => {\n    if (query !== '') {\n      const p = persons.filter(person => person.name.toLowerCase().includes(query.toLowerCase()))\n      return (\n        p.map(i => \n          <p key={i.id}>\n          {i.name}{i.number}</p>)\n      )\n    } else return (\n      persons.map(i =>  \n        <p key={i.id}>\n        {i.name} {i.number} \n        <button onClick={() => handleDelete(i.id)}>delete</button>\n        </p>\n        )\n      )\n}\n\nexport default People","const Notification = ({ message, messageClass }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className={messageClass}>\n        {message}\n      </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport dbService from './services/persons'\nimport Search from './components/search'\nimport Form from './components/form'\nimport People from './components/people'\nimport Notification from './components/notification'\nimport './index.css'\n\nconst App = () => {\n  const [persons, setPersons] = useState([]) \n  const [newName, setNewName] = useState('')\n  const [phone, setPhone] = useState('')\n  const [query, setQuery] = useState('')\n  const [message, setMessage] =useState(null)\n  const [messageClass, setMessageClass] = useState(null)\n\n  useEffect(() => {\n    dbService\n      .getAll()\n      .then(dbpersons => {\n        setPersons(dbpersons)\n      })\n\n  }, [])\n\n  const handleNoteChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handlePhoneChange = (event) => {\n    setPhone(event.target.value)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const person = persons.filter(person => person.name === newName)\n    if (person.length > 0 && person[0].number !==phone) {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const changedPerson = { ...person[0], number: phone }\n        dbService\n          .replace(changedPerson)\n          .then(data => {\n            if (data ===null){\n              setMessageClass('error')\n              setMessage(`${changedPerson.name} has already been removed from the server`)\n              setTimeout(() => {\n                setMessage(null)\n              }, 5000)\n            } else { setPersons(persons.map(person => person.id !== changedPerson.id ? person : data)) }\n          })\n          .catch(error => {\n            setMessageClass('error')\n            setMessage(error.response.data.error)\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n          })\n      }\n    } else if (person.length > 0 && person[0].number ===phone) {\n      alert(`${newName} is already added to phonebook`)\n    }\n      else {\n      const newPerson = {name: newName, number: phone}\n      dbService\n        .create(newPerson)\n        .then(dbnewperson => {\n          setPersons(persons.concat(dbnewperson))\n          setMessageClass('notif')\n          setMessage(`${dbnewperson.name} added successfully`)\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setMessageClass('error')\n          setMessage(error.response.data.error)\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n    }\n    setNewName('')\n    setPhone('')\n  } \n\n  const handleDelete = (id) => {\n    const person = persons.find(p => p.id === id)\n\n    if (window.confirm(`Do you want to delete ${person.name}?`)) { \n      setPersons(persons.filter(p => p.id !== id))\n      dbService.makeDeletion(id) \n    } \n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Search query={query} setQuery={setQuery}/>\n      <h2>add a new</h2>\n      <Notification message={message} messageClass={messageClass}/>\n      <Form phone={phone} newName={newName} handleNoteChange={handleNoteChange} handlePhoneChange={handlePhoneChange} handleSubmit={handleSubmit}/>\n      <h2>Numbers</h2>\n      <People persons={persons} query={query} handleDelete={handleDelete}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}